schemaVersion: "2.2"
description: Docker Deployment
parameters:
  image:
    type: String
  name:
    type: String
  files:
    type: String
    default: ""
  ports:
    type: String
    default: ""
  env:
    type: String
    default: ""
  network:
    type: String
    default: ""
  volumes:
    type: String
    default: ""
  cmd:
    type: String
    default: ""
mainSteps:
  - action: aws:runShellScript
    name: checkDockerInstallation
    inputs:
      runCommand:
        - |
          MAX_RETRIES=5
          RETRY_COUNT=0
          while [[ $(systemctl is-active docker) != "active" ]]; do
            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "Docker is not active after $MAX_RETRIES retries. Exiting."
              exit 1
            fi
            echo "Docker is not active. Retry #$((++RETRY_COUNT))..."
            sleep 10
          done
          docker --version
      onFailure: exit
  - name: writeApplicationFiles
    action: aws:runShellScript
    inputs:
      runCommand:
        - |
          set -euo pipefail
          if [ -z "{{ files }}" ]; then
            echo "No files to write. Skipping this step."
            exit 0
          fi

          volume_source_dir="/srv/docker/{{ name }}"
          mkdir -p "$volume_source_dir"

          echo "{{ files }}" | tr ',' '\n' | while IFS=':' read -r file_name file_content_base64; do
            echo "Writing file: $file_name to $volume_source_dir..."
            echo "$file_content_base64" | base64 -d > "$volume_source_dir/$file_name"
          done
      onFailure: exit
  - action: aws:runShellScript
    name: rolloutApplication
    inputs:
      runCommand:
        - |
          set -euo pipefail

          docker_args=""
          if [ -n "{{ network }}" ]; then
            docker network create "{{ network }}" 2>/dev/null || true
            docker_args="$docker_args --network {{ network }}"
          fi

          ${login_command}

          docker rm -f {{name}} 2>/dev/null || true
          docker image prune -a --force
          docker image pull {{image}}:latest

          docker run --restart unless-stopped -d \
            {{ports}} {{env}} {{volumes}} $docker_args --name {{name}} {{image}}:latest \
            {{cmd}}
